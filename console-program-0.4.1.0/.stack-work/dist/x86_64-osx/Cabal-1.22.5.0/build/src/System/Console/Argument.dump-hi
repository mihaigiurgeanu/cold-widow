
==================== FINAL INTERFACE ====================
2016-11-13 23:04:21.151824 UTC

interface conso_IyAwL61Q1p4FdscxhLOf04:System.Console.Argument 7103
  interface hash: e85d355d56437bc8da9b8a13c813137f
  ABI hash: 477089164ff3845b4e15d1cbfc878594
  export-list hash: 7ff5edff4538493beb3033e93fd50705
  orphan hash: ef048371cfb4f505fd706ae8315b795d
  flag hash: 8ed1679aa76be9f72d94d70934be57d0
  sig of: Nothing
  used TH splices: False
  where
exports:
  System.Console.Argument.boolean
  System.Console.Argument.device
  System.Console.Argument.directory
  System.Console.Argument.file
  System.Console.Argument.integer
  System.Console.Argument.natural
  System.Console.Argument.option
  System.Console.Argument.optional
  System.Console.Argument.string
  System.Console.Argument.Type{System.Console.Argument.Type System.Console.Argument.defaultValue System.Console.Argument.name System.Console.Argument.parser}
  System.Console.Internal.Option
module dependencies: System.Console.Internal
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0* binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0 monads-tf-0.1.0.3@monad_9v7GLHi1lt0Lhi5iR1wppM
                      mtl-2.2.1@mtl_BvezOBBn8XzHkNI2WBxXdG
                      parsec-3.1.11@parse_5O7xx7b9UqU5wmXJqwSNwN
                      parsec-extra-0.1.0.5@parse_E31NVFAqhj78eXFXjn8y6m
                      text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne
                      transformers-0.4.3.0@trans_6cQ9dYX241E73czBLUJDEg
                      utility-ht-0.0.12@utili_I8JMj9LX9mqFR3z2HtJWas
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
         transformers-0.4.3.0@trans_6cQ9dYX241E73czBLUJDEg:Control.Monad.Trans.Error
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         monads-tf-0.1.0.3@monad_9v7GLHi1lt0Lhi5iR1wppM:Control.Monad.Error.Class
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
import  -/  base-4.8.2.0:Data.Char c8f827952d4111ae2e47c0b105217cdb
import  -/  base-4.8.2.0:Data.Either e8724afd65fd432cfe9a54014f5f762d
import  -/  base-4.8.2.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.IO bb5b81adcea33b14bd4abe16d7dde45f
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:GHC.Unicode cdf84fc3abbaf34ba6b6645291cef991
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.Console.GetOpt daf81574dc3d91348ad27e777014814d
import  -/  System.Console.Internal 2f871324b8b910f3a933b68fe89dd7e8
  exports: ad7e247b3da58d07370a604735f9919e
  Long 5b1b4275922124a305d785587c94f058
  Option d0d127f9a81d4fd47f552dbeeba98875
  Option a320ef2e766507cda8bf45bc17f9d0d4
  Short 07fd024d1dbace05e68c90c559293dfe
  identify 3a3f823eb8b4a353be689ec020185966
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map bf7758bd12b23a367777a33fd16e39de
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base c921f79770a215e3f4c72c747cb6a28a
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  integer-gmp-1.0.0.0:GHC.Integer.Type 371e90fe753f08ddedf0d2657a9ef5c4
import  -/  parsec-extra-0.1.0.5@parse_E31NVFAqhj78eXFXjn8y6m:Text.Parsec.Extra b5ff51d5162729b5436268ca8e0cb0f3
import  -/  utility-ht-0.0.12@utili_I8JMj9LX9mqFR3z2HtJWas:Data.List.HT 4940d4e2e042049435aae57de70eed11
import  -/  utility-ht-0.0.12@utili_I8JMj9LX9mqFR3z2HtJWas:Data.List.HT.Private e350cd3c685305df9ec197812d68200a
753c41ecbbd31f31f0b8d9f0599a6762
  $fFunctorType :: GHC.Base.Functor System.Console.Argument.Type
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ System.Console.Argument.Type
                  System.Console.Argument.$fFunctorType_$cfmap
                  System.Console.Argument.$fFunctorType_$c<$ -}
753c41ecbbd31f31f0b8d9f0599a6762
  $fFunctorType_$c<$ ::
    a
    -> System.Console.Argument.Type b -> System.Console.Argument.Type a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(C(U),U,1*U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b w :: a w1 :: System.Console.Argument.Type b ->
                 case w1 of ww { System.Console.Argument.Type ww1 ww2 ww3 ->
                 System.Console.Argument.Type
                   @ a
                   (\ x :: GHC.Base.String ->
                    case ww1 x of wild {
                      Data.Either.Left x1 -> Data.Either.Left @ [GHC.Types.Char] @ a x1
                      Data.Either.Right y
                      -> Data.Either.Right @ [GHC.Types.Char] @ a w })
                   ww2
                   (case ww3 of wild {
                      GHC.Base.Nothing -> GHC.Base.Nothing @ a
                      GHC.Base.Just a1 -> GHC.Base.Just @ a w }) }) -}
753c41ecbbd31f31f0b8d9f0599a6762
  $fFunctorType_$cfmap ::
    (a -> b)
    -> System.Console.Argument.Type a -> System.Console.Argument.Type b
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,C(U)><S,1*U(C(U),U,1*U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b w :: a -> b w1 :: System.Console.Argument.Type a ->
                 case w1 of ww { System.Console.Argument.Type ww1 ww2 ww3 ->
                 System.Console.Argument.Type
                   @ b
                   (\ x :: GHC.Base.String ->
                    case ww1 x of wild {
                      Data.Either.Left x1 -> Data.Either.Left @ [GHC.Types.Char] @ b x1
                      Data.Either.Right y
                      -> Data.Either.Right @ [GHC.Types.Char] @ b (w y) })
                   ww2
                   (case ww3 of wild {
                      GHC.Base.Nothing -> GHC.Base.Nothing @ b
                      GHC.Base.Just a1 -> GHC.Base.Just @ b (w a1) }) }) -}
e35e8e3e29323fda2ebe3127a6988c61
  $s$fApplicativeEither ::
    GHC.Base.Applicative (Data.Either.Either [GHC.Types.Char])
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Either.Either [GHC.Types.Char])
                  (Data.Either.$fFunctorEither @ [GHC.Types.Char])
                  System.Console.Argument.$s$fApplicativeEither_$s$fMonadEither_$creturn
                  System.Console.Argument.$s$fApplicativeEither1
                  (Data.Either.$fApplicativeEither_$c*>
                     @ [GHC.Types.Char]
                     (Data.Either.$fFunctorEither @ [GHC.Types.Char]))
                  (Data.Either.$fApplicativeEither_$c<*
                     @ [GHC.Types.Char]
                     (Data.Either.$fFunctorEither @ [GHC.Types.Char])) -}
7f8ca40ac9930a27e585bb9901dbc61f
  $s$fApplicativeEither1 ::
    Data.Either.Either [GHC.Types.Char] (a -> b)
    -> Data.Either.Either [GHC.Types.Char] a
    -> Data.Either.Either [GHC.Types.Char] b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   ds :: Data.Either.Either [GHC.Types.Char] (a -> b)
                   ds1 :: Data.Either.Either [GHC.Types.Char] a ->
                 case ds of wild {
                   Data.Either.Left e1 -> Data.Either.Left @ [GHC.Types.Char] @ b e1
                   Data.Either.Right f
                   -> Data.Either.$fFunctorEither_$cfmap
                        @ [GHC.Types.Char]
                        @ a
                        @ b
                        f
                        ds1 }) -}
22f7f9e9633a5d3cacc9b89ce06b1fa0
  $s$fApplicativeEither_$s$fMonadEither_$creturn ::
    a -> Data.Either.Either [GHC.Types.Char] a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (0, True, True)
                (Data.Either.Right @ [GHC.Types.Char]) -}
cecda11474c24f908a71bfe939dc676d
  $s$fError[] :: Control.Monad.Trans.Error.Error [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [GHC.Types.Char]
                  System.Console.Argument.$s$fError[]_$s$fError[]_$cnoMsg
                  (GHC.Base.id @ [GHC.Types.Char]) -}
df16c699359d70784ac8eae01abd91f8
  $s$fError[]_$s$fError[]_$cnoMsg :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, False)
                (GHC.Base.id @ [GHC.Types.Char] (GHC.Types.[] @ GHC.Types.Char)) -}
9e1ddd63ff64433ed4119d369e8ceade
  $s$fMonadEither ::
    GHC.Base.Monad (Data.Either.Either [GHC.Types.Char])
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Either.Either [GHC.Types.Char])
                  System.Console.Argument.$s$fMonadEither4
                  System.Console.Argument.$s$fMonadEither3
                  System.Console.Argument.$s$fMonadEither2
                  System.Console.Argument.$s$fApplicativeEither_$s$fMonadEither_$creturn
                  System.Console.Argument.$s$fMonadEither1 -}
3b19294ac3f31a3a84a67af4fd93cbc0
  $s$fMonadEither1 ::
    GHC.Base.String -> Data.Either.Either [GHC.Types.Char] a
  {- Arity: 1, Strictness: <B,U>b,
     Unfolding: InlineRule (1, True, True)
                (\ @ a eta :: [GHC.Types.Char] ->
                 GHC.Err.error @ (Data.Either.Either [GHC.Types.Char] a) eta) -}
aa89b9dbf2fd46f033ba0486489e6b3d
  $s$fMonadEither2 ::
    Data.Either.Either [GHC.Types.Char] a
    -> Data.Either.Either [GHC.Types.Char] b
    -> Data.Either.Either [GHC.Types.Char] b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   eta :: Data.Either.Either [GHC.Types.Char] a
                   eta1 :: Data.Either.Either [GHC.Types.Char] b ->
                 case eta of wild {
                   Data.Either.Left x -> Data.Either.Left @ [GHC.Types.Char] @ b x
                   Data.Either.Right y -> eta1 }) -}
1eb0030e68158e06074fa11700c668f0
  $s$fMonadEither3 ::
    Data.Either.Either [GHC.Types.Char] a
    -> (a -> Data.Either.Either [GHC.Types.Char] b)
    -> Data.Either.Either [GHC.Types.Char] b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*C1(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   ds :: Data.Either.Either [GHC.Types.Char] a
                   ds1 :: a -> Data.Either.Either [GHC.Types.Char] b ->
                 case ds of wild {
                   Data.Either.Left l -> Data.Either.Left @ [GHC.Types.Char] @ b l
                   Data.Either.Right r -> ds1 r }) -}
e76f05466398bf1aa30c5032145f3132
  $s$fMonadEither4 ::
    GHC.Base.Applicative (Data.Either.Either [GHC.Types.Char])
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                System.Console.Argument.$s$fApplicativeEither -}
ad4af1997a9d2c2b646f0ccc5472a6d5
  $s$fMonadErrorEither ::
    Control.Monad.Error.Class.MonadError
      (Data.Either.Either [GHC.Types.Char])
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Either.Either [GHC.Types.Char])
                  System.Console.Argument.$s$fMonadErrorEither3
                  (Control.Monad.Error.Class.$fMonadErrorEither_$cthrowError
                     @ [GHC.Types.Char]
                     System.Console.Argument.$s$fMonadErrorEither3
                     System.Console.Argument.$s$fMonadErrorEither2)
                  System.Console.Argument.$s$fMonadErrorEither1 -}
f70bb820acae90c5a12fbbe741bd2bc2
  $s$fMonadErrorEither1 ::
    Data.Either.Either [GHC.Types.Char] a
    -> (Control.Monad.Error.Class.ErrorType
          (Data.Either.Either [GHC.Types.Char])
        -> Data.Either.Either [GHC.Types.Char] a)
    -> Data.Either.Either [GHC.Types.Char] a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*C1(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ds :: Data.Either.Either [GHC.Types.Char] a
                   h :: Control.Monad.Error.Class.ErrorType
                          (Data.Either.Either [GHC.Types.Char])
                        -> Data.Either.Either [GHC.Types.Char] a ->
                 case ds of wild {
                   Data.Either.Left l
                   -> h l `cast`
                        (Sub (Sym (Control.Monad.Error.Class.TFCo:R:ErrorTypeEither[0]
                                       <[GHC.Types.Char]>_N)))
                   Data.Either.Right r
                   -> Data.Either.Right @ [GHC.Types.Char] @ a r }) -}
bfaa127a185e5625e85f26364acdce2e
  $s$fMonadErrorEither2 ::
    Control.Monad.Trans.Error.Error [GHC.Types.Char]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                System.Console.Argument.$s$fError[] -}
8c2fad24e2cdf81eac44be6068292bb5
  $s$fMonadErrorEither3 ::
    GHC.Base.Monad (Data.Either.Either [GHC.Types.Char])
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                System.Console.Argument.$s$fMonadEither -}
799b1460913771aca9e3cd78b1cf4a84
  $sfromList ::
    [([GHC.Types.Char], a)] -> Data.Map.Base.Map [GHC.Types.Char] a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a ds :: [([GHC.Types.Char], a)] ->
                 case ds of wild {
                   [] -> Data.Map.Base.Tip @ [GHC.Types.Char] @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { DEFAULT ->
                           Data.Map.Base.Bin
                             @ [GHC.Types.Char]
                             @ a
                             1
                             dt
                             x
                             (Data.Map.Base.Tip @ [GHC.Types.Char] @ a)
                             (Data.Map.Base.Tip @ [GHC.Types.Char] @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case GHC.Classes.$fOrd[]_$s$ccompare1 kx ky of wild4 {
                             DEFAULT
                             -> case kx of dt { DEFAULT ->
                                System.Console.Argument.$sfromList1
                                  @ a
                                  (Data.Map.Base.Bin
                                     @ [GHC.Types.Char]
                                     @ a
                                     1
                                     dt
                                     x
                                     (Data.Map.Base.Tip @ [GHC.Types.Char] @ a)
                                     (Data.Map.Base.Tip @ [GHC.Types.Char] @ a))
                                  wild2 }
                             GHC.Types.LT
                             -> case kx of dt { DEFAULT ->
                                System.Console.Argument.$wpoly_go10
                                  @ a
                                  1
                                  (Data.Map.Base.Bin
                                     @ [GHC.Types.Char]
                                     @ a
                                     1
                                     dt
                                     x
                                     (Data.Map.Base.Tip @ [GHC.Types.Char] @ a)
                                     (Data.Map.Base.Tip @ [GHC.Types.Char] @ a))
                                  wild2 } } } } } }) -}
f18ead6b23efb8d218620db4187622bc
  $sfromList1 ::
    Data.Map.Base.Map [GHC.Types.Char] a1
    -> [([GHC.Types.Char], a1)]
    -> Data.Map.Base.Map [GHC.Types.Char] a1
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
3d9feca3b4791490209245b77266b44a
  $sinsert_$sgo10 ::
    [GHC.Types.Char]
    -> a1
    -> Data.Map.Base.Map [GHC.Types.Char] a1
    -> Data.Map.Base.Map [GHC.Types.Char] a1
  {- Arity: 3, Strictness: <S,1*U><L,U><S,1*U> -}
6ce9d1dc1243fd98dd2d0897aef219dc
  $slookup1 ::
    [GHC.Types.Char]
    -> Data.Map.Base.Map [GHC.Types.Char] a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
ce0275ca7c664d74dea5f02529f3c9e2
  $woption ::
    [GHC.Types.Char]
    -> [GHC.Base.String]
    -> System.Console.Argument.Type a
    -> a
    -> GHC.Base.String
    -> (# [System.Console.Internal.OptionName],
          System.Console.GetOpt.OptDescr
            (System.Console.Internal.Identifier,
             GHC.Base.Maybe GHC.Base.String),
          a,
          GHC.Base.Maybe GHC.Base.String
          -> Data.Either.Either GHC.Base.String a #)
  {- Arity: 5, Strictness: <L,U><L,U><L,U(C(U),U,U)><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: [GHC.Types.Char]
                   w1 :: [GHC.Base.String]
                   w2 :: System.Console.Argument.Type a
                   w3 :: a
                   w4 :: GHC.Base.String ->
                 let {
                   names :: [System.Console.Internal.OptionName]
                   = let {
                       z :: [System.Console.Internal.OptionName]
                       = GHC.Base.map
                           @ [GHC.Types.Char]
                           @ System.Console.Internal.OptionName
                           System.Console.Internal.Long
                           w1
                     } in
                     letrec {
                       go :: [GHC.Types.Char] -> [System.Console.Internal.OptionName]
                         {- Arity: 1, Strictness: <S,1*U> -}
                       = \ ds :: [GHC.Types.Char] ->
                         case ds of wild {
                           [] -> z
                           : y ys
                           -> GHC.Types.:
                                @ System.Console.Internal.OptionName
                                (System.Console.Internal.Short y)
                                (go ys) }
                     } in
                     go w
                 } in
                 let {
                   identifier :: System.Console.Internal.Identifier
                   = case names of wild {
                       [] -> System.Console.Internal.identify1
                       : n ds1
                       -> n `cast` (Sym (System.Console.Internal.NTCo:Identifier[0])) }
                 } in
                 (# names,
                    System.Console.GetOpt.Option
                      @ (System.Console.Internal.Identifier,
                         GHC.Base.Maybe GHC.Base.String)
                      w
                      w1
                      (case w2 of wild { System.Console.Argument.Type ds ds1 ds2 ->
                       case ds2 of wild1 {
                         GHC.Base.Nothing
                         -> System.Console.GetOpt.ReqArg
                              @ (System.Console.Internal.Identifier,
                                 GHC.Base.Maybe GHC.Base.String)
                              (\ x :: GHC.Base.String ->
                               (identifier, GHC.Base.Just @ GHC.Base.String x))
                              ds1
                         GHC.Base.Just x
                         -> System.Console.GetOpt.OptArg
                              @ (System.Console.Internal.Identifier,
                                 GHC.Base.Maybe GHC.Base.String)
                              (GHC.Tuple.(,)
                                 @ System.Console.Internal.Identifier
                                 @ (GHC.Base.Maybe GHC.Base.String)
                                 identifier)
                              ds1 } })
                      w4,
                    w3,
                    let {
                      n :: Data.Either.Either GHC.Base.String a
                      = case w2 of wild { System.Console.Argument.Type ds ds1 ds2 ->
                        case ds2 of wild1 {
                          GHC.Base.Nothing -> System.Console.Argument.option1 @ a
                          GHC.Base.Just x -> Data.Either.Right @ [GHC.Types.Char] @ a x } }
                    } in
                    \ ds1 :: GHC.Base.Maybe GHC.Base.String ->
                    case ds1 of wild {
                      GHC.Base.Nothing -> n
                      GHC.Base.Just x
                      -> case w2 of wild1 { System.Console.Argument.Type ds ds2 ds3 ->
                         ds x } } #)) -}
b5d952c64625df3b83302de7d92af8a7
  $wpoly_go10 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map [GHC.Types.Char] a
    -> [([GHC.Types.Char], a)]
    -> Data.Map.Base.Map [GHC.Types.Char] a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
753c41ecbbd31f31f0b8d9f0599a6762
  data Type a
    = Type {parser :: GHC.Base.String
                      -> Data.Either.Either GHC.Base.String a,
            name :: GHC.Base.String,
            defaultValue :: GHC.Base.Maybe a}
099daabb3bf63afb8493fb354a854484
  boolean :: System.Console.Argument.Type GHC.Types.Bool
  {- Strictness: m,
     Unfolding: (System.Console.Argument.Type
                   @ GHC.Types.Bool
                   System.Console.Argument.boolean3
                   System.Console.Argument.boolean2
                   System.Console.Argument.boolean1) -}
eb6a0299d647d03fffee4bd6d76b4188
  boolean1 :: GHC.Base.Maybe GHC.Types.Bool
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just @ GHC.Types.Bool GHC.Types.True) -}
4f2e1f35eb5fe1f73380c579f98bd64e
  boolean10 :: [([GHC.Types.Char], GHC.Types.Bool)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.Types.Bool)
                   System.Console.Argument.boolean20
                   System.Console.Argument.boolean11) -}
2a2b71af169fbe89116c9c6ff6add1c9
  boolean11 :: [([GHC.Types.Char], GHC.Types.Bool)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.Types.Bool)
                   System.Console.Argument.boolean18
                   System.Console.Argument.boolean12) -}
0b7fcb1de50666f7ad59d88010ebd201
  boolean12 :: [([GHC.Types.Char], GHC.Types.Bool)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.Types.Bool)
                   System.Console.Argument.boolean16
                   System.Console.Argument.boolean13) -}
3dcd2fd206c733cdd753230632575bcd
  boolean13 :: [([GHC.Types.Char], GHC.Types.Bool)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.Types.Bool)
                   System.Console.Argument.boolean14
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.Types.Bool))) -}
975f8879b75cb0645d7a59f0fe1af791
  boolean14 :: ([GHC.Types.Char], GHC.Types.Bool)
  {- Unfolding: ((System.Console.Argument.boolean15,
                  GHC.Types.False)) -}
9bf5e36a722dcb4af2c44c26f7b01780
  boolean15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "no"#) -}
6595d8518db1b5f547634a9554c26570
  boolean16 :: ([GHC.Types.Char], GHC.Types.Bool)
  {- Unfolding: ((System.Console.Argument.boolean17,
                  GHC.Types.True)) -}
a2ccacf13fd0ec373eb214f0e5b71b48
  boolean17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "yes"#) -}
d19d59ea27f56baf5caee2382b207036
  boolean18 :: ([GHC.Types.Char], GHC.Types.Bool)
  {- Unfolding: ((System.Console.Argument.boolean19,
                  GHC.Types.False)) -}
a046a18d388a651e2df66f3b43b3cce5
  boolean19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "off"#) -}
0a7f1f4edb91d6ba45d337a4c0b82d1c
  boolean2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "BOOL"#) -}
531ba1a267a995d1a562fdfb052d4983
  boolean20 :: ([GHC.Types.Char], GHC.Types.Bool)
  {- Unfolding: ((System.Console.Argument.boolean21,
                  GHC.Types.True)) -}
0ba7b9473e47e073793e716046b1f630
  boolean21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "on"#) -}
11b99b1fbce816a18a0671d84733e094
  boolean22 :: ([GHC.Types.Char], GHC.Types.Bool)
  {- Unfolding: ((System.Console.Argument.boolean23,
                  GHC.Types.False)) -}
7ab8e56de51cdd7bb807290e077a42cf
  boolean23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "false"#) -}
072bc36f5ba0bbcb7542dc33675f63a4
  boolean24 :: ([GHC.Types.Char], GHC.Types.Bool)
  {- Unfolding: ((System.Console.Argument.boolean25,
                  GHC.Types.True)) -}
1d3877de7749cbe63788aaee0d3f3cde
  boolean25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "true"#) -}
494c9d790e1a3c6c2d5d518593254603
  boolean26 :: ([GHC.Types.Char], GHC.Types.Bool)
  {- Unfolding: ((System.Console.Argument.boolean27,
                  GHC.Types.False)) -}
cad3b94678fa03725fad5b84a784efbd
  boolean27 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "0"#) -}
4b5afe62ace5ebfb3f4cb8dce20bd235
  boolean28 :: ([GHC.Types.Char], GHC.Types.Bool)
  {- Unfolding: ((System.Console.Argument.boolean29,
                  GHC.Types.True)) -}
65b75477e132dee2646b47dd3b33405f
  boolean29 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "1"#) -}
73bf3e2170b207812a9f445db529da6e
  boolean3 ::
    GHC.Base.String
    -> Data.Either.Either GHC.Base.String GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ y :: GHC.Base.String ->
                 case System.Console.Argument.$slookup1
                        @ GHC.Types.Bool
                        (GHC.Base.map
                           @ GHC.Types.Char
                           @ GHC.Types.Char
                           GHC.Unicode.toLower
                           y)
                        System.Console.Argument.boolean_m of wild {
                   GHC.Base.Nothing
                   -> Data.Either.Left
                        @ [GHC.Types.Char]
                        @ GHC.Types.Bool
                        (GHC.CString.unpackAppendCString#
                           "Argument "#
                           (GHC.Base.++
                              @ GHC.Types.Char
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.shows6
                                 (GHC.Show.showLitString y System.Console.Argument.boolean5))
                              System.Console.Argument.boolean4))
                   GHC.Base.Just x
                   -> Data.Either.Right @ [GHC.Types.Char] @ GHC.Types.Bool x }) -}
abfca91b22978f7811028b6dd03620c5
  boolean4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   " could not be recognised as a boolean."#) -}
6d8b50eeb1ad62bb0dc050f3651b550c
  boolean5 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows6
                   (GHC.Types.[] @ GHC.Types.Char)) -}
71133e1a66e65e9ec9f3dd93a59838f7
  boolean6 :: [([GHC.Types.Char], GHC.Types.Bool)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.Types.Bool)
                   System.Console.Argument.boolean28
                   System.Console.Argument.boolean7) -}
a75db46d9450f6864f37a5e0eb5752df
  boolean7 :: [([GHC.Types.Char], GHC.Types.Bool)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.Types.Bool)
                   System.Console.Argument.boolean26
                   System.Console.Argument.boolean8) -}
0aef4b8a5e97900aaa497ea230b2f11b
  boolean8 :: [([GHC.Types.Char], GHC.Types.Bool)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.Types.Bool)
                   System.Console.Argument.boolean24
                   System.Console.Argument.boolean9) -}
76f8893fdd4dda3c0f91330996af29fe
  boolean9 :: [([GHC.Types.Char], GHC.Types.Bool)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.Types.Bool)
                   System.Console.Argument.boolean22
                   System.Console.Argument.boolean10) -}
cf2233b7244c59b700d354fcf60917f4
  boolean_m :: Data.Map.Base.Map [GHC.Types.Char] GHC.Types.Bool
  {- Unfolding: (System.Console.Argument.$sfromList
                   @ GHC.Types.Bool
                   System.Console.Argument.boolean6) -}
9912cc1bc008aef401793a469603314d
  defaultValue :: System.Console.Argument.Type a -> GHC.Base.Maybe a
  RecSel System.Console.Argument.Type
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ds :: System.Console.Argument.Type a ->
                 case ds of wild { System.Console.Argument.Type ds1 ds2 ds3 ->
                 ds3 }) -}
b298d85ae58eceb97c6e8b7d503004ce
  device :: System.Console.Argument.Type GHC.IO.FilePath
  {- Strictness: m,
     Unfolding: (System.Console.Argument.Type
                   @ GHC.IO.FilePath
                   (Data.Either.Right @ GHC.Base.String @ GHC.Base.String)
                   System.Console.Argument.device1
                   (GHC.Base.Nothing @ GHC.Base.String)) -}
bb8031601365efaba0d2d6e9a77ba331
  device1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DEVICE"#) -}
4befae96d4e97dce6b3fe4d45f2a247c
  directory :: System.Console.Argument.Type GHC.IO.FilePath
  {- Strictness: m,
     Unfolding: (System.Console.Argument.Type
                   @ GHC.IO.FilePath
                   System.Console.Argument.directory2
                   System.Console.Argument.directory1
                   (GHC.Base.Nothing @ GHC.IO.FilePath)) -}
f3ad46000155ce6b8b31da1b48d04339
  directory1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DIR"#) -}
9bfa66c75e09ccb165abce78895c6d7b
  directory2 ::
    GHC.Base.String
    -> Data.Either.Either GHC.Base.String GHC.IO.FilePath
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Base.String ->
                 Data.Either.Right
                   @ GHC.Base.String
                   @ GHC.IO.FilePath
                   (case Data.List.HT.Private.viewR1 @ GHC.Types.Char w of wild {
                      GHC.Base.Nothing -> GHC.Types.[] @ GHC.Types.Char
                      GHC.Base.Just ds
                      -> case ds of wild1 { (,) i l ->
                         case l of wild2 { GHC.Types.C# c1 ->
                         case c1 of wild3 { DEFAULT -> w '/' -> i } } } })) -}
6d48d8f234d1df65990c0738c3c3585c
  file :: System.Console.Argument.Type GHC.IO.FilePath
  {- Strictness: m,
     Unfolding: (System.Console.Argument.Type
                   @ GHC.IO.FilePath
                   (Data.Either.Right @ GHC.Base.String @ GHC.Base.String)
                   System.Console.Argument.file1
                   (GHC.Base.Nothing @ GHC.Base.String)) -}
1a208f2f6a8fe0e22378d5be55bfef2e
  file1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FILE"#) -}
57245eca3bdb58938263a847e944061e
  integer :: System.Console.Argument.Type GHC.Integer.Type.Integer
  {- Strictness: m,
     Unfolding: (System.Console.Argument.Type
                   @ GHC.Integer.Type.Integer
                   System.Console.Argument.integer2
                   System.Console.Argument.integer1
                   (GHC.Base.Nothing @ GHC.Integer.Type.Integer)) -}
656ca6f0add1077e35eeb2cf883df1d7
  integer1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INT"#) -}
4cd41cdf9adcd3f0d37fab9b2de82022
  integer2 ::
    [GHC.Types.Char]
    -> Data.Either.Either GHC.Base.String GHC.Integer.Type.Integer
  {- Arity: 1,
     Unfolding: (Text.Parsec.Extra.parseM
                   @ GHC.Types.Char
                   @ GHC.Integer.Type.Integer
                   @ (Data.Either.Either GHC.Base.String)
                   System.Console.Argument.$s$fMonadErrorEither
                   System.Console.Argument.$s$fError[]
                     `cast`
                   (Control.Monad.Trans.Error.Error
                      (Sym (Control.Monad.Error.Class.TFCo:R:ErrorTypeEither[0]
                                <[GHC.Types.Char]>_N)))_R
                   System.Console.Argument.integer3
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e50a3bed8e97a3a8a8cc0792edfede36
  integer3 ::
    Text.Parsec.String.GenParser
      GHC.Types.Char () GHC.Integer.Type.Integer
  {- Unfolding: (Text.Parsec.Extra.integer
                   @ ()
                   @ GHC.Integer.Type.Integer
                   GHC.Real.$fIntegralInteger) -}
31f2f7cfcd4516be1a52a80532c15ef1
  name :: System.Console.Argument.Type a -> GHC.Base.String
  RecSel System.Console.Argument.Type
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ds :: System.Console.Argument.Type a ->
                 case ds of wild { System.Console.Argument.Type ds1 ds2 ds3 ->
                 ds2 }) -}
0b3db9513859190c31b2a5d71ca66d1a
  natural :: System.Console.Argument.Type GHC.Integer.Type.Integer
  {- Strictness: m,
     Unfolding: (System.Console.Argument.Type
                   @ GHC.Integer.Type.Integer
                   System.Console.Argument.natural2
                   System.Console.Argument.natural1
                   (GHC.Base.Nothing @ GHC.Integer.Type.Integer)) -}
d61be3f0f4ff3e463c9d8109659996a0
  natural1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INT (natural)"#) -}
a304dd5adbd63433c89c1e764ad6f477
  natural2 ::
    [GHC.Types.Char]
    -> Data.Either.Either GHC.Base.String GHC.Integer.Type.Integer
  {- Arity: 1,
     Unfolding: (Text.Parsec.Extra.parseM
                   @ GHC.Types.Char
                   @ GHC.Integer.Type.Integer
                   @ (Data.Either.Either GHC.Base.String)
                   System.Console.Argument.$s$fMonadErrorEither
                   System.Console.Argument.$s$fError[]
                     `cast`
                   (Control.Monad.Trans.Error.Error
                      (Sym (Control.Monad.Error.Class.TFCo:R:ErrorTypeEither[0]
                                <[GHC.Types.Char]>_N)))_R
                   System.Console.Argument.natural3
                   (GHC.Types.[] @ GHC.Types.Char)) -}
c76c2f65d56e9a280e95dd0c85172f55
  natural3 ::
    Text.Parsec.String.GenParser
      GHC.Types.Char () GHC.Integer.Type.Integer
  {- Unfolding: (Text.Parsec.Extra.natural
                   @ ()
                   @ GHC.Integer.Type.Integer
                   GHC.Real.$fIntegralInteger) -}
cb2fbec0520a805897d6523f18e1b6d9
  option ::
    [GHC.Types.Char]
    -> [GHC.Base.String]
    -> System.Console.Argument.Type a
    -> a
    -> GHC.Base.String
    -> System.Console.Internal.Option a
  {- Arity: 5, Strictness: <L,U><L,U><L,U(C(U),U,U)><L,U><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   w :: [GHC.Types.Char]
                   w1 :: [GHC.Base.String]
                   w2 :: System.Console.Argument.Type a
                   w3 :: a
                   w4 :: GHC.Base.String ->
                 case System.Console.Argument.$woption
                        @ a
                        w
                        w1
                        w2
                        w3
                        w4 of ww { (#,,,#) ww1 ww2 ww3 ww4 ->
                 System.Console.Internal.Option @ a ww1 ww2 ww3 ww4 }) -}
c760f650f0235b2a8f96f8236e4c4a9f
  option1 :: Data.Either.Either [GHC.Types.Char] a
  {- Strictness: m1,
     Unfolding: (\ @ a ->
                 Data.Either.Left
                   @ [GHC.Types.Char]
                   @ a
                   System.Console.Argument.option2) -}
abf95cdc0892a3b7dc797eef4b3b0b23
  option2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Option argument missing."#) -}
58faf18ce299c0a830f608bd6341d594
  optional ::
    a
    -> System.Console.Argument.Type a -> System.Console.Argument.Type a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(U,U,A)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a x :: a t :: System.Console.Argument.Type a ->
                 case t of wild { System.Console.Argument.Type ds ds1 ds2 ->
                 System.Console.Argument.Type @ a ds ds1 (GHC.Base.Just @ a x) }) -}
6826f108c5317384f885af0815ecb5a3
  parser ::
    System.Console.Argument.Type a
    -> GHC.Base.String -> Data.Either.Either GHC.Base.String a
  RecSel System.Console.Argument.Type
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ds :: System.Console.Argument.Type a ->
                 case ds of wild { System.Console.Argument.Type ds1 ds2 ds3 ->
                 ds1 }) -}
9648a70947afab94335fcfbf76753e3b
  string :: System.Console.Argument.Type GHC.Base.String
  {- Strictness: m,
     Unfolding: (System.Console.Argument.Type
                   @ GHC.Base.String
                   (Data.Either.Right @ GHC.Base.String @ GHC.Base.String)
                   System.Console.Argument.string1
                   (GHC.Base.Nothing @ GHC.Base.String)) -}
c589794b48f4d98d7de46039127220a0
  string1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "STRING"#) -}
instance GHC.Base.Functor [System.Console.Argument.Type]
  = System.Console.Argument.$fFunctorType
"SPEC/System.Console.Argument $fApplicativeEither @ [Char]" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                                           (Data.Either.Either
                                                                                              [GHC.Types.Char])
  Data.Either.$fApplicativeEither @ [GHC.Types.Char] $dFunctor
  = System.Console.Argument.$s$fApplicativeEither
"SPEC/System.Console.Argument $fError[] @ Char" [ALWAYS] forall $dErrorList :: Control.Monad.Trans.Error.ErrorList
                                                                                 GHC.Types.Char
  Control.Monad.Trans.Error.$fError[] @ GHC.Types.Char $dErrorList
  = System.Console.Argument.$s$fError[]
"SPEC/System.Console.Argument $fError[]_$cnoMsg @ Char" [ALWAYS] forall $dErrorList :: Control.Monad.Trans.Error.ErrorList
                                                                                         GHC.Types.Char
  Control.Monad.Trans.Error.$fError[]_$cnoMsg @ GHC.Types.Char
                                              $dErrorList
  = System.Console.Argument.$s$fError[]_$s$fError[]_$cnoMsg
"SPEC/System.Console.Argument $fMonadEither @ [Char]" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                         (Data.Either.Either
                                                                                            [GHC.Types.Char])
  Data.Either.$fMonadEither @ [GHC.Types.Char] $dApplicative
  = System.Console.Argument.$s$fMonadEither
"SPEC/System.Console.Argument $fMonadEither_$creturn @ [Char]" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                                  (Data.Either.Either
                                                                                                     [GHC.Types.Char])
  Data.Either.$fMonadEither_$creturn @ [GHC.Types.Char] $dApplicative
  = System.Console.Argument.$s$fApplicativeEither_$s$fMonadEither_$creturn
"SPEC/System.Console.Argument $fMonadErrorEither @ [Char]" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                                        (Data.Either.Either
                                                                                           [GHC.Types.Char])
                                                                           $dError :: Control.Monad.Trans.Error.Error
                                                                                        [GHC.Types.Char]
  Control.Monad.Error.Class.$fMonadErrorEither @ [GHC.Types.Char]
                                               $dMonad
                                               $dError
  = System.Console.Argument.$s$fMonadErrorEither
"SPEC/System.Console.Argument fromList @ [Char] _" [ALWAYS] forall @ a
                                                                   $dOrd :: GHC.Classes.Ord
                                                                              [GHC.Types.Char]
  Data.Map.Base.fromList @ [GHC.Types.Char] @ a $dOrd
  = System.Console.Argument.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

