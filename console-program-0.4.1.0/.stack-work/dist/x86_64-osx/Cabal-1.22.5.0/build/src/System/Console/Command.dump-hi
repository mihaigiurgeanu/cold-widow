
==================== FINAL INTERFACE ====================
2016-11-15 20:00:00.364113 UTC

interface conso_IyAwL61Q1p4FdscxhLOf04:System.Console.Command 7103
  interface hash: 4276d4c1eda8bc6c82255b3aa5226883
  ABI hash: 7acaa44a88cca9d43f4c9b03c2150047
  export-list hash: 9b6a23ee056ec2027956915ae8190137
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 8ed1679aa76be9f72d94d70934be57d0
  sig of: Nothing
  used TH splices: False
  where
exports:
  System.Console.Command.command
  System.Console.Command.ignoreOption
  System.Console.Command.io
  System.Console.Command.withNonOption
  System.Console.Command.withNonOptions
  System.Console.Command.withOption
  System.Console.Command.Commands
  System.Console.Internal.Action
  System.Console.Internal.Command{System.Console.Internal.Command System.Console.Internal.action System.Console.Internal.description System.Console.Internal.name System.Console.Internal.shorten}
  Data.Tree.Tree{Data.Tree.Node}
module dependencies: System.Console.Argument
                     System.Console.Internal
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0* binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU*
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0 monads-tf-0.1.0.3@monad_9v7GLHi1lt0Lhi5iR1wppM
                      mtl-2.2.1@mtl_BvezOBBn8XzHkNI2WBxXdG
                      parsec-3.1.11@parse_5O7xx7b9UqU5wmXJqwSNwN
                      parsec-extra-0.1.0.5@parse_E31NVFAqhj78eXFXjn8y6m
                      text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne
                      transformers-0.4.3.0@trans_6cQ9dYX241E73czBLUJDEg
                      utility-ht-0.0.12@utili_I8JMj9LX9mqFR3z2HtJWas
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
         transformers-0.4.3.0@trans_6cQ9dYX241E73czBLUJDEg:Control.Monad.Trans.Error
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         monads-tf-0.1.0.3@monad_9v7GLHi1lt0Lhi5iR1wppM:Control.Monad.Error.Class
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
import  -/  base-4.8.2.0:Control.Exception e9090e246fba030faecf7b81b3e8e320
import  -/  base-4.8.2.0:Data.Either e8724afd65fd432cfe9a54014f5f762d
import  -/  base-4.8.2.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.IO bb5b81adcea33b14bd4abe16d7dde45f
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.Exit f5581af4ad998e898da01fdc74c2769b
import  -/  base-4.8.2.0:System.IO 0899686bfc1d9ef72dff3de85e99862a
import  -/  System.Console.Argument 477089164ff3845b4e15d1cbfc878594
  exports: 7ff5edff4538493beb3033e93fd50705
  Type 753c41ecbbd31f31f0b8d9f0599a6762
  defaultValue 9912cc1bc008aef401793a469603314d
  name 31f2f7cfcd4516be1a52a80532c15ef1
  parser 6826f108c5317384f885af0815ecb5a3
import  -/  System.Console.Internal 2f871324b8b910f3a933b68fe89dd7e8
  exports: ad7e247b3da58d07370a604735f9919e
  Action 3762273a59fc591a64e7c6781fd922ae
  Action 51202661b24e3ac376afcbf0e04ddf8d
  Command 6bc2bad45191a50583adde99fd26c235
  Command be605c3c0aa4e62607ac32780e202907
  Option d0d127f9a81d4fd47f552dbeeba98875
  Option a320ef2e766507cda8bf45bc17f9d0d4
  UnknownCommand 30609e629f24752abc6163d3334da546
  action 5c9596f94cbc199cd4d94f8d3478ab30
  description 3fecd62adc88185fbb8e31c692542e78
  identify 3a3f823eb8b4a353be689ec020185966
  ignoringOptions ac659d5e035083e439cae48339231db0
  name 889b4579c3066bd24c4ca4c6f408aa69
  nonOptions d96504cd189a93cc300f37c5348a220c
  options 8b25cbe38567385686afec50c1cd3224
  run cc7918a2df5f1de46b8cfebfd4a9a94f
  shorten 4bba81b04f083e7e22dedb87fc351e75
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map bf7758bd12b23a367777a33fd16e39de
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base c921f79770a215e3f4c72c747cb6a28a
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Tree f0b7807efc082fbe02bdb2290b2a6c88
import  -/  transformers-0.4.3.0@trans_6cQ9dYX241E73czBLUJDEg:Control.Monad.IO.Class 18a8aebf532e56b9dcb6e2d608dadd75
fc8b02bd7d8d71fd286ef1793ea87580
  $slookup1 ::
    System.Console.Internal.Identifier
    -> Data.Map.Base.Map System.Console.Internal.Identifier a
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
a16b2f364abdf1741b80a73555083661
  $wio ::
    Control.Monad.IO.Class.MonadIO m =>
    m ()
    -> (# [GHC.Base.String]
          -> System.Console.Internal.Settings -> m (),
          [GHC.Base.String],
          [((System.Console.Internal.Identifier,
             [System.Console.Internal.OptionName]),
            System.Console.GetOpt.OptDescr
              System.Console.Internal.CanonicalSetting)],
          [System.Console.GetOpt.OptDescr
             System.Console.Internal.CanonicalSetting] #)
  {- Arity: 2, Strictness: <L,1*U(A,1*U)><L,U>, Inline: [0],
     Unfolding: (\ @ (m :: * -> *)
                   w :: Control.Monad.IO.Class.MonadIO m
                   w1 :: m () ->
                 let {
                   f :: GHC.Types.IO () -> m ()
                   = Control.Monad.IO.Class.liftIO @ m w @ ()
                 } in
                 (# \ ds :: [GHC.Base.String]
                      ds1 :: System.Console.Internal.Settings ->
                    case ds of wild {
                      [] -> w1
                      : ipv ipv1
                      -> f (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                            GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ ()
                              (System.Console.Internal.$fExceptionConsoleProgramException_$ctoException
                                 (System.Console.Internal.UnknownCommand
                                    (GHC.Base.++
                                       @ GHC.Types.Char
                                       ipv
                                       (Data.OldList.unwords_go ipv1))))
                              eta)
                             `cast`
                           (Sym (GHC.Types.NTCo:IO[0] <()>_R)) },
                    GHC.Types.[] @ GHC.Base.String,
                    GHC.Types.[]
                      @ ((System.Console.Internal.Identifier,
                          [System.Console.Internal.OptionName]),
                         System.Console.GetOpt.OptDescr
                           System.Console.Internal.CanonicalSetting),
                    GHC.Types.[]
                      @ (System.Console.GetOpt.OptDescr
                           System.Console.Internal.CanonicalSetting) #)) -}
432989c0b899fb7ff89ad7c0e18990a4
  $wwithNonOption ::
    Control.Monad.IO.Class.MonadIO m =>
    System.Console.Argument.Type x
    -> (x -> System.Console.Internal.Action m)
    -> (# [GHC.Base.String]
          -> System.Console.Internal.Settings -> m (),
          [GHC.Base.String],
          [((System.Console.Internal.Identifier,
             [System.Console.Internal.OptionName]),
            System.Console.GetOpt.OptDescr
              System.Console.Internal.CanonicalSetting)],
          [System.Console.GetOpt.OptDescr
             System.Console.Internal.CanonicalSetting] #)
  {- Arity: 3,
     Strictness: <L,U(A,U)><L,U(C(U),U,U)><L,C(U(1*C1(C1(U)),1*U,1*U,1*U))>,
     Inline: [0],
     Unfolding: (\ @ x
                   @ (m :: * -> *)
                   w :: Control.Monad.IO.Class.MonadIO m
                   w1 :: System.Console.Argument.Type x
                   w2 :: x -> System.Console.Internal.Action m ->
                 let {
                   lvl :: m ()
                   = Control.Monad.IO.Class.liftIO
                       @ m
                       w
                       @ ()
                       (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                        case GHC.IO.Handle.Text.hPutStr2
                               GHC.IO.Handle.FD.stdout
                               (GHC.CString.unpackAppendCString#
                                  "Error: missing argument of type "#
                                  (case w1 of wild { System.Console.Argument.Type ds1 ds2 ds3 ->
                                   ds2 }))
                               GHC.Types.True
                               s of ds1 { (#,#) ipv ipv1 ->
                        System.Exit.die2 @ () ipv })
                         `cast`
                       (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                 } in
                 let {
                   lvl1 :: GHC.Types.IO () -> m ()
                   = Control.Monad.IO.Class.liftIO @ m w @ ()
                 } in
                 (# \ nonOpts :: [GHC.Base.String]
                      opts :: System.Console.Internal.Settings ->
                    case nonOpts of wild {
                      []
                      -> case w1 of wild1 { System.Console.Argument.Type ds1 ds2 ds3 ->
                         case ds3 of wild2 {
                           GHC.Base.Nothing -> lvl
                           GHC.Base.Just y
                           -> case w2
                                     y of wild3 { System.Console.Internal.Action ds4 ds5 ds6 ds7 ->
                              ds4 (GHC.Types.[] @ GHC.Base.String) opts } } }
                      : x1 xs
                      -> case w1 of wild1 { System.Console.Argument.Type ds1 ds2 ds3 ->
                         case ds1 x1 of wild2 {
                           Data.Either.Left e
                           -> lvl1
                                (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                                 case GHC.IO.Handle.Text.hPutStr2
                                        GHC.IO.Handle.FD.stdout
                                        e
                                        GHC.Types.True
                                        s of ds4 { (#,#) ipv ipv1 ->
                                 System.Exit.die2 @ () ipv })
                                  `cast`
                                (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                           Data.Either.Right y
                           -> case w2
                                     y of wild3 { System.Console.Internal.Action ds4 ds5 ds6 ds7 ->
                              ds4 xs opts } } } },
                    GHC.Types.:
                      @ GHC.Base.String
                      (System.Console.Argument.name @ x w1)
                      (case w2
                              (GHC.Err.undefined
                                 @ x) of wild { System.Console.Internal.Action ds1 ds2 ds3 ds4 ->
                       ds2 }),
                    case w2
                           (GHC.Err.undefined
                              @ x) of wild { System.Console.Internal.Action ds1 ds2 ds3 ds4 ->
                    ds3 },
                    case w2
                           (GHC.Err.undefined
                              @ x) of wild { System.Console.Internal.Action ds1 ds2 ds3 ds4 ->
                    ds4 } #)) -}
c23babece2b19092c418328df5d14394
  $wwithNonOptions ::
    Control.Monad.IO.Class.MonadIO m =>
    System.Console.Argument.Type x
    -> ([x] -> System.Console.Internal.Action m)
    -> (# [GHC.Base.String]
          -> System.Console.Internal.Settings -> m (),
          [GHC.Base.String],
          [((System.Console.Internal.Identifier,
             [System.Console.Internal.OptionName]),
            System.Console.GetOpt.OptDescr
              System.Console.Internal.CanonicalSetting)],
          [System.Console.GetOpt.OptDescr
             System.Console.Internal.CanonicalSetting] #)
  {- Arity: 3,
     Strictness: <L,1*U(A,1*U)><L,U(C(U),1*U,A)><L,C(U(1*C1(C1(U)),1*U,1*U,1*U))>,
     Inline: [0],
     Unfolding: (\ @ x
                   @ (m :: * -> *)
                   w :: Control.Monad.IO.Class.MonadIO m
                   w1 :: System.Console.Argument.Type x
                   w2 :: [x] -> System.Console.Internal.Action m ->
                 let {
                   lvl :: GHC.Types.IO () -> m ()
                   = Control.Monad.IO.Class.liftIO @ m w @ ()
                 } in
                 (# \ nonOpts :: [GHC.Base.String]
                      opts :: System.Console.Internal.Settings ->
                    letrec {
                      runWithArgs :: [x] -> [GHC.Base.String] -> m ()
                        {- Arity: 2, Strictness: <L,U><S,1*U> -}
                      = \ args :: [x] ds :: [GHC.Base.String] ->
                        case ds of wild {
                          []
                          -> case w2
                                    (GHC.List.reverse
                                       @ x
                                       args) of wild1 { System.Console.Internal.Action ds1 ds2 ds3 ds4 ->
                             ds1 (GHC.Types.[] @ GHC.Base.String) opts }
                          : x1 xs
                          -> case w1 of wild1 { System.Console.Argument.Type ds1 ds2 ds3 ->
                             case ds1 x1 of wild2 {
                               Data.Either.Left e
                               -> lvl
                                    (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                                     case GHC.IO.Handle.Text.hPutStr2
                                            GHC.IO.Handle.FD.stdout
                                            e
                                            GHC.Types.True
                                            s of ds4 { (#,#) ipv ipv1 ->
                                     System.Exit.die2 @ () ipv })
                                      `cast`
                                    (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                               Data.Either.Right y
                               -> runWithArgs (GHC.Types.: @ x y args) xs } } }
                    } in
                    runWithArgs (GHC.Types.[] @ x) nonOpts,
                    GHC.Types.:
                      @ GHC.Base.String
                      (GHC.CString.unpackAppendCString#
                         "["#
                         (case w1 of wild { System.Console.Argument.Type ds1 ds2 ds3 ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            ds2
                            System.Console.Command.withNonOptions1 }))
                      (case w2
                              (GHC.Types.[]
                                 @ x) of wild { System.Console.Internal.Action ds1 ds2 ds3 ds4 ->
                       ds2 }),
                    case w2
                           (GHC.Types.[]
                              @ x) of wild { System.Console.Internal.Action ds1 ds2 ds3 ds4 ->
                    ds3 },
                    case w2
                           (GHC.Types.[]
                              @ x) of wild { System.Console.Internal.Action ds1 ds2 ds3 ds4 ->
                    ds4 } #)) -}
9e51e8cf8818ddac37f56e24c71a182b
  $wwithOption ::
    Control.Monad.IO.Class.MonadIO m =>
    [System.Console.Internal.OptionName]
    -> System.Console.GetOpt.OptDescr
         (System.Console.Internal.Identifier,
          GHC.Base.Maybe GHC.Base.String)
    -> a
    -> (GHC.Base.Maybe GHC.Base.String
        -> Data.Either.Either GHC.Base.String a)
    -> (a -> System.Console.Internal.Action m)
    -> (# [GHC.Base.String]
          -> System.Console.Internal.Settings -> m (),
          [GHC.Base.String],
          [((System.Console.Internal.Identifier,
             [System.Console.Internal.OptionName]),
            System.Console.GetOpt.OptDescr
              System.Console.Internal.CanonicalSetting)],
          [System.Console.GetOpt.OptDescr
             System.Console.Internal.CanonicalSetting] #)
  {- Arity: 6,
     Strictness: <L,1*U(A,1*U)><L,U><L,U><L,U><L,C(U)><L,C(U(1*C1(C1(U)),1*U,1*U,1*U))>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ (m :: * -> *)
                   w :: Control.Monad.IO.Class.MonadIO m
                   ww :: [System.Console.Internal.OptionName]
                   ww1 :: System.Console.GetOpt.OptDescr
                            (System.Console.Internal.Identifier,
                             GHC.Base.Maybe GHC.Base.String)
                   ww2 :: a
                   ww3 :: GHC.Base.Maybe GHC.Base.String
                          -> Data.Either.Either GHC.Base.String a
                   w1 :: a -> System.Console.Internal.Action m ->
                 let {
                   lvl :: GHC.Types.IO () -> m ()
                   = Control.Monad.IO.Class.liftIO @ m w @ ()
                 } in
                 let {
                   lvl1 :: System.Console.Internal.Identifier
                   = case ww of wild {
                       [] -> System.Console.Internal.identify1
                       : n ds1
                       -> n `cast` (Sym (System.Console.Internal.NTCo:Identifier[0])) }
                 } in
                 let {
                   lvl2 :: System.Console.Internal.Action m = w1 ww2
                 } in
                 (# \ nonOpts :: [GHC.Base.String]
                      opts :: System.Console.Internal.Settings ->
                    case System.Console.Command.$slookup1
                           @ (GHC.Base.Maybe GHC.Base.String)
                           lvl1
                           opts of wild {
                      GHC.Base.Nothing
                      -> case lvl2 of wild1 { System.Console.Internal.Action ds1 ds2 ds3 ds4 ->
                         ds1 nonOpts opts }
                      GHC.Base.Just x
                      -> case ww3 x of wild1 {
                           Data.Either.Left e
                           -> lvl
                                (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                                 case GHC.IO.Handle.Text.hPutStr2
                                        GHC.IO.Handle.FD.stdout
                                        e
                                        GHC.Types.True
                                        s of ds1 { (#,#) ipv ipv1 ->
                                 System.Exit.die2 @ () ipv })
                                  `cast`
                                (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                           Data.Either.Right a1
                           -> case w1
                                     a1 of wild2 { System.Console.Internal.Action ds1 ds2 ds3 ds4 ->
                              ds1 nonOpts opts } } },
                    case w1
                           (GHC.Err.undefined
                              @ a) of wild { System.Console.Internal.Action ds1 ds2 ds3 ds4 ->
                    ds2 },
                    GHC.Types.:
                      @ ((System.Console.Internal.Identifier,
                          [System.Console.Internal.OptionName]),
                         System.Console.GetOpt.OptDescr
                           System.Console.Internal.CanonicalSetting)
                      ((System.Console.Internal.identify ww, ww), ww1)
                      (case w1
                              (GHC.Err.undefined
                                 @ a) of wild { System.Console.Internal.Action ds1 ds2 ds3 ds4 ->
                       ds3 }),
                    case w1
                           (GHC.Err.undefined
                              @ a) of wild { System.Console.Internal.Action ds1 ds2 ds3 ds4 ->
                    ds4 } #)) -}
147ac00c999f89af686bab5425abc91f
  type Commands (m :: * -> *) =
    Data.Tree.Tree (System.Console.Internal.Command m)
5790463c8f02695173952492890eebef
  command ::
    GHC.Base.String
    -> GHC.Base.String
    -> System.Console.Internal.Action m
    -> System.Console.Internal.Command m
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,U>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ (m :: * -> *)
                   n :: GHC.Base.String
                   d :: GHC.Base.String
                   a :: System.Console.Internal.Action m ->
                 System.Console.Internal.Command @ m n d a GHC.Types.True) -}
fcfe8226846633995f11a49fdf7661b3
  ignoreOption ::
    System.Console.Internal.Option a
    -> System.Console.Internal.Action m
    -> System.Console.Internal.Action m
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(A,U,A,A)><S,1*U(U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ (m :: * -> *)
                   ds :: System.Console.Internal.Option a
                   a1 :: System.Console.Internal.Action m ->
                 case ds of wild { System.Console.Internal.Option ds1 g ds2 ds3 ->
                 case a1 of wild1 { System.Console.Internal.Action ds4 ds5 ds6 ds7 ->
                 System.Console.Internal.Action
                   @ m
                   ds4
                   ds5
                   ds6
                   (GHC.Types.:
                      @ (System.Console.GetOpt.OptDescr
                           System.Console.Internal.CanonicalSetting)
                      g
                      ds7) } }) -}
2610b55a876d7f5843a05c6aa4b5ebda
  io ::
    Control.Monad.IO.Class.MonadIO m =>
    m () -> System.Console.Internal.Action m
  {- Arity: 2, Strictness: <L,1*U(A,1*U)><L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ (m :: * -> *)
                   w :: Control.Monad.IO.Class.MonadIO m
                   w1 :: m () ->
                 case System.Console.Command.$wio
                        @ m
                        w
                        w1 of ww { (#,,,#) ww1 ww2 ww3 ww4 ->
                 System.Console.Internal.Action @ m ww1 ww2 ww3 ww4 }) -}
8955929ee52094ce23ab1928407d0c69
  withNonOption ::
    Control.Monad.IO.Class.MonadIO m =>
    System.Console.Argument.Type x
    -> (x -> System.Console.Internal.Action m)
    -> System.Console.Internal.Action m
  {- Arity: 3,
     Strictness: <L,U(A,U)><L,U(C(U),U,U)><L,C(U(1*C1(C1(U)),1*U,1*U,1*U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ x
                   @ (m :: * -> *)
                   w :: Control.Monad.IO.Class.MonadIO m
                   w1 :: System.Console.Argument.Type x
                   w2 :: x -> System.Console.Internal.Action m ->
                 case System.Console.Command.$wwithNonOption
                        @ x
                        @ m
                        w
                        w1
                        w2 of ww { (#,,,#) ww1 ww2 ww3 ww4 ->
                 System.Console.Internal.Action @ m ww1 ww2 ww3 ww4 }) -}
b3c9fb7b06ee1ad48ca07382703190c8
  withNonOptions ::
    Control.Monad.IO.Class.MonadIO m =>
    System.Console.Argument.Type x
    -> ([x] -> System.Console.Internal.Action m)
    -> System.Console.Internal.Action m
  {- Arity: 3,
     Strictness: <L,1*U(A,1*U)><L,U(C(U),1*U,A)><L,C(U(1*C1(C1(U)),1*U,1*U,1*U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ x
                   @ (m :: * -> *)
                   w :: Control.Monad.IO.Class.MonadIO m
                   w1 :: System.Console.Argument.Type x
                   w2 :: [x] -> System.Console.Internal.Action m ->
                 case System.Console.Command.$wwithNonOptions
                        @ x
                        @ m
                        w
                        w1
                        w2 of ww { (#,,,#) ww1 ww2 ww3 ww4 ->
                 System.Console.Internal.Action @ m ww1 ww2 ww3 ww4 }) -}
c79752a66a11c8aca5895d87aaac1029
  withNonOptions1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "...]"#) -}
722fa250e518b4dbb3eecea6b3135e73
  withOption ::
    Control.Monad.IO.Class.MonadIO m =>
    System.Console.Internal.Option a
    -> (a -> System.Console.Internal.Action m)
    -> System.Console.Internal.Action m
  {- Arity: 3,
     Strictness: <L,1*U(A,1*U)><S,1*U(U,U,U,C(U))><L,C(U(1*C1(C1(U)),1*U,1*U,1*U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ (m :: * -> *)
                   w :: Control.Monad.IO.Class.MonadIO m
                   w1 :: System.Console.Internal.Option a
                   w2 :: a -> System.Console.Internal.Action m ->
                 case w1 of ww { System.Console.Internal.Option ww1 ww2 ww3 ww4 ->
                 case System.Console.Command.$wwithOption
                        @ a
                        @ m
                        w
                        ww1
                        ww2
                        ww3
                        ww4
                        w2 of ww5 { (#,,,#) ww6 ww7 ww8 ww9 ->
                 System.Console.Internal.Action @ m ww6 ww7 ww8 ww9 } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

